name: CI Cross-Platform - Build Raylib Project

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Cloner le dépôt
        uses: actions/checkout@v3

      - name: Déterminer le nom du projet
        id: project
        shell: bash
        run: echo "name=$(basename "$GITHUB_WORKSPACE")" >> "$GITHUB_OUTPUT"

      # === Dépendances par OS ===
      - name: Installer Raylib (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y cmake build-essential \
            libasound2-dev libx11-dev libxcursor-dev \
            libxrandr-dev libxi-dev libgl1-mesa-dev \
            libxinerama-dev libxss-dev libwayland-dev \
            libpulse-dev libxext-dev git
          git clone https://github.com/raysan5/raylib.git
          cd raylib
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF ..
          make
          sudo make install

      - name: Installer Raylib (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install cmake raylib

      - name: Installer MinGW + CMake (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install mingw -y
          choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Ajouter MinGW au PATH (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: echo "C:\\ProgramData\\mingw64\\mingw64\\bin" >> $env:GITHUB_PATH

      - name: Installer Raylib (Windows - via source)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          git clone https://github.com/raysan5/raylib.git
          cd raylib
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DBUILD_EXAMPLES=OFF ..
          mingw32-make
          cmake --install . --prefix "C:/raylib"

      # === Configuration et Build ===
      - name: Nettoyage du dossier build
        run: rm -rf build

      - name: Créer le dossier build
        run: mkdir build

      - name: Configurer le projet avec CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G "MinGW Makefiles" -DCMAKE_PREFIX_PATH="C:/raylib"

      - name: Configurer le projet avec CMake (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Compiler le projet
        run: cmake --build build --config Release

      - name: Vérifier l'exécutable
        shell: bash
        run: |
          bin="build/${{ steps.project.outputs.name }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}"
          echo "Vérification de l'exécutable : $bin"
          [ -f "$bin" ] && echo "Exécutable généré" || (echo "Manquant" && exit 1)
    
      - name: Sauvegarder l'exécutable comme artefact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}-binary"
          path: build/${{ steps.project.outputs.name }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

      - name: Publier la release (tag uniquement)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "Release ${{ github.ref_name }} - ${{ matrix.os }}"
          files: build/${{ steps.project.outputs.name }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
